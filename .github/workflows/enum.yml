name: Enum

on:
  push:
  workflow_dispatch:

jobs:
  enum:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: set-result
        with:
          script: |
            const owner = "pwntester";
            const repo = "octo.nvim";

            var result = {
              "visibility": "private",
              "workflows": []
            };

            // Get repo visibility
            const info = await github.rest.repos.get({
              owner,
              repo,
            });
            result['visibility'] = info.data.visibility;

            // Requires admin perms
            // const permissions = await github.rest.actions.getGithubActionsDefaultWorkflowPermissionsRepository({
            //   owner,
            //   repo,
            // });


            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo,
            });

            if (workflows.data.workflows.total_count == 0) {
              console.log("No workflows found");
              return result;
            }

            for (const workflow of workflows.data.workflows) {
              const runs = await github.rest.actions.listWorkflowRuns({
                "owner": owner,
                "repo": repo,
                "workflow_id": workflow.id,
                "status": "success"
              });   

              if (runs.data.total_count > 0) {
                // TODO: For multi-trigger workflows, a single run does not represent all the possible 
                //       permissions, runners, etc.
                const last_run = runs.data.workflow_runs[0];
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  "owner": owner,
                  "repo" : repo,
                  "run_id": last_run.id,
                });

                if (jobs.data.total_count > 0) {

                  var job_details = {}
                  for (const job of jobs.data.jobs) {
                    const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                      "owner": owner,
                      "repo": repo,
                      "job_id": job.id,
                    });

                    var permissions = {};
                    var runner = {};
                    var in_perm_lines = false;
                    var in_runner_lines = false;
                    var secret_source = "";
                    for (const line of logs.data.split("\n")) {
                      const parts = line.split(" ")
                      const msg = parts.slice(1).join(" ");
                      if (msg == "##[group]GITHUB_TOKEN Permissions") {
                        in_perm_lines = true;
                        in_runner_lines = false;
                      } else if (msg == "##[group]Runner Image") {
                        in_perm_lines = false;
                        in_runner_lines = true;
                      } else if (msg == "##[endgroup]") {
                        in_perm_lines = false;
                        in_runner_lines = false;
                      } else if (in_perm_lines) {
                        const [key, value] = msg.split(":");
                        permissions[key.trim()] = value.trim();
                      } else if (in_runner_lines) {
                        const [key, value] = msg.split(":");
                        runner[key.trim()] = value.trim();
                      } else if (msg.startsWith("Secret source:")) {
                        secret_source = msg.split(":")[1].trim();
                      }
                    }

                    job_details[job.name] = {
                      "name": job.name,
                      "id": job.id,
                      "permissions": permissions,
                      "runners": runner,
                      "secret_source": secret_source,
                    }
                  }
                  result["workflows"].push({
                    "path": workflow.path,
                    "jobs": job_details
                  });

                }
              }
            }
            console.log(result);
            return result;
      - name: Get result
        run: echo ${{ toJSON(steps.set-result.outputs.result) }} | jq '.'
