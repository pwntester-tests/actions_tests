name: Enum

on:
  push:
  workflow_dispatch:

jobs:
  enum:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        id: set-result
        with:
          script: |
            const owner = "pwntester";
            const repo = "octo.nvim";

            // Requires admin perms
            //const permissions = github.rest.actions.getGithubActionsDefaultWorkflowPermissionsRepository({
            //  owner,
            //  repo,
            //});
            //console.log(permissions);

            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo,
            });
            //console.log(workflows);

            if (workflows.data.workflows.total_count == 0) {
              console.log("No workflows found");
              return;
            }
            for (const workflow of workflows.data.workflows) {
              console.log("Workflow ID: " + workflow.id);
              console.log("Workflow Path: " + workflow.path);
              const runs = await github.rest.actions.listWorkflowRuns({
                "owner": owner,
                "repo": repo,
                "workflow_id": workflow.id,
                "status": "success"
              });   
              //console.log(runs);
              if (runs.data.total_count > 0) {
                const last_run = runs.data.workflow_runs[0];
                //console.log(last_run);

                const run_id = last_run.id;
                console.log("Last Run ID: " + run_id);
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner,
                  repo,
                  run_id,
                });
                if (jobs.data.total_count > 0) {
                  const first_job = jobs.data.jobs[0]; 
                  console.log("Job ID: " + first_job.id);
                  const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                    "owner": owner,
                    "repo": repo,
                    "job_id": first_job.id,
                  });

                  var permissions = {};
                  var runner = {};
                  var in_perm_lines = false;
                  var in_runner_lines = false;
                  var secret_source = "";
                  for (const line of logs.data.split("\n")) {
                    // remove date
                    line = line.substring(29);
                    console.log(">>>>>" + line + "<<<<<");
                    if (line == "##[group]GITHUB_TOKEN Permissions") {
                      in_perm_lines = true;
                      in_runner_lines = false;
                    } else if (line == "##[group]Runner Image") {
                      in_perm_lines = false;
                      in_runner_lines = true;
                    } else if (line == "##[endgroup]") {
                      in_perm_lines = false;
                      in_runner_lines = false;
                    } else if (in_perm_lines) {
                      const [key, value] = line.split(":");
                      permissions[key.trim()] = value.trim();
                    } else if (in_runner_lines) {
                      const [key, value] = line.split(":");
                      runner[key.trim()] = value.trim();
                    } else if (line.startsWith("Secret source:")) {
                      secret_source = line.split(":")[1].trim();
                    }
                  }
                  console.log({
                    permissions: permissions,
                    runner: runner,
                    secret_source: secret_source,
                  });

                }
              }
            }

            return "Hello!"
          result-encoding: string
      - name: Get result
        run: echo "${{steps.set-result.outputs.result}}"
